var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.015,1,2.082]],["body/classes/AllExceptionsFilter.html",[0,0.013,1,2.617,2,1.271,3,0.264,4,0.228,5,0.228,6,3.378,7,2.393,8,2.943,9,4.682,10,0.42,11,1.403,12,4.682,13,4.039,14,5.567,15,3.915,16,5.086,17,0.663,18,2.861,19,0.994,20,0.031,21,0.917,22,0.558,23,0.994,24,5.086,25,0.994,26,2.393,27,0.424,28,2.861,29,0.464,30,2.358,31,3.908,32,2.084,33,2.861,34,0.264,35,2.383,36,2.861,37,2.861,38,2.861,39,2.861,40,4.039,41,2.943,42,2.861,43,2.861,44,5.567,45,2.861,46,2.084,47,1.169,48,2.861,49,2.861,50,2.861,51,2.861,52,2.393,53,2.861,54,2.861,55,2.861,56,2.861,57,1.517,58,2.861,59,2.393,60,2.861,61,0.014,62,0.019,63,0.014]],["title/modules/AppModule.html",[64,0.951,65,2.082]],["body/modules/AppModule.html",[0,0.01,1,2.595,3,0.201,4,0.174,5,0.174,20,0.032,27,0.594,29,0.354,32,1.591,34,0.201,61,0.01,62,0.016,63,0.01,64,1.185,65,3.858,66,0.892,67,1.158,68,1.415,69,1.415,70,1.158,71,2.147,72,1.275,73,1.827,74,1.827,75,2.953,76,2.953,77,2.953,78,2.953,79,2.682,80,2.147,81,1.415,82,1.415,83,2.184,84,2.37,85,4.47,86,2.184,87,4.005,88,4.396,89,1.415,90,3.314,91,4.005,92,3.314,93,1.827,94,2.184,95,1.827,96,2.184,97,2.184,98,2.184,99,2.184,100,2.184,101,2.184,102,1.827,103,2.184,104,2.414,105,2.772,106,2.772,107,1.151,108,2.184,109,2.184,110,2.184,111,2.184,112,2.184,113,4.005,114,4.47,115,2.184,116,2.184,117,4.47,118,4.806,119,2.184,120,2.184,121,2.184,122,2.184,123,2.184,124,2.184,125,2.184,126,1.415,127,2.184,128,2.184,129,1.158]],["title/controllers/AuthController.html",[130,1.556,131,2.082]],["body/controllers/AuthController.html",[0,0.017,3,0.335,4,0.29,5,0.29,10,0.533,11,1.65,17,0.841,19,1.262,20,0.031,21,1.165,23,1.262,25,1.262,27,0.556,29,0.589,30,2.12,34,0.335,61,0.017,62,0.023,63,0.017,107,1.839,130,1.759,131,3.079,132,1.759,133,3.038,134,2.646,135,3.632,136,3.973,137,3.632,138,1.926,139,3.632,140,3.632,141,3.973,142,3.038,143,3.038,144,2.564,145,2.646,146,2.354,147,3.632,148,3.038,149,3.632,150,2.646,151,3.632,152,3.632,153,3.632,154,1.165,155,3.632]],["title/modules/AuthModule.html",[64,0.951,75,1.876]],["body/modules/AuthModule.html",[0,0.013,3,0.263,4,0.228,5,0.228,20,0.031,27,0.623,29,0.462,34,0.263,61,0.014,62,0.019,63,0.014,64,1.383,66,1.165,67,1.512,68,1.848,69,1.848,70,1.512,71,3.028,72,1.664,75,3.587,79,2.948,80,2.611,81,1.848,82,1.848,84,2.136,102,2.385,131,3.028,132,1.952,144,2.693,145,2.077,156,2.385,157,2.852,158,2.385,159,3.246,160,3.246,161,2.852,162,2.852,163,2.077,164,2.852,165,1.512,166,2.852,167,1.848,168,2.385,169,2.852,170,2.852,171,2.852,172,2.852,173,2.077,174,2.077,175,2.077,176,2.852,177,2.077,178,2.385,179,2.852,180,2.852,181,2.852]],["title/injectables/AuthService.html",[144,1.556,182,0.627]],["body/injectables/AuthService.html",[0,0.012,3,0.242,4,0.21,5,0.21,10,0.386,11,1.321,17,1.035,19,1.552,20,0.031,21,1.433,22,0.871,23,1.552,25,1.321,27,0.469,29,0.426,34,0.242,35,1.985,47,2.212,61,0.021,62,0.018,63,0.012,107,1.88,136,3.181,144,1.842,150,1.916,154,1.433,163,1.916,182,0.742,183,1.075,184,2.2,185,3.804,186,1.075,187,2.631,188,2.622,189,5.582,190,2.631,191,3.804,192,2.631,193,1.57,194,3.804,195,4.896,196,2.631,197,2.017,198,1.69,199,2.631,200,1.169,201,1.395,202,2.631,203,2.631,204,3.804,205,3.804,206,2.771,207,3.804,208,3.181,209,2.631,210,2.631,211,2.631,212,1.395,213,1.916,214,2.2,215,2.2,216,2.631,217,2.631,218,2.631,219,2.631,220,2.631]],["title/interfaces/AuthenticatedRequest.html",[221,1.876,222,2.082]],["body/interfaces/AuthenticatedRequest.html",[0,0.012,3,0.235,4,0.204,5,0.204,8,1.859,10,0.375,20,0.032,22,0.498,27,0.562,29,0.414,30,2.563,31,3.199,34,0.343,35,2.144,41,1.859,46,1.859,61,0.018,62,0.018,63,0.012,107,0.886,129,1.353,154,1.773,182,0.726,193,1.817,198,1.133,200,1.133,201,1.972,206,1.859,213,1.859,221,1.489,222,2.411,223,2.552,224,1.859,225,1.802,226,1.653,227,2.127,228,3.112,229,3.112,230,3.112,231,3.112,232,1.859,233,2.134,234,2.134,235,1.653,236,1.653,237,1.401,238,2.134,239,1.353,240,2.134,241,2.134,242,2.134,243,2.134,244,4.036,245,2.594,246,2.134,247,3.112,248,2.134,249,2.134,250,2.134,251,1.353,252,2.134,253,2.134,254,1.859,255,2.134,256,2.134,257,1.859,258,2.134,259,2.134,260,2.134,261,2.134]],["title/classes/BaseSerializerService.html",[0,0.015,262,2.082]],["body/classes/BaseSerializerService.html",[0,0.012,2,1.144,3,0.237,4,0.206,5,0.206,10,0.378,11,1.301,17,1.123,19,1.683,20,0.031,21,1.554,22,0.945,23,1.683,25,1.683,27,0.393,34,0.237,57,1.986,61,0.012,62,0.018,63,0.012,107,1.533,126,2.427,154,1.415,198,2.153,200,1.961,227,2.602,235,2.463,236,1.668,237,2.139,245,2.138,251,3.071,262,2.427,263,3.752,264,1.876,265,3.132,266,3.132,267,4.053,268,3.132,269,3.132,270,5.09,271,2.575,272,3.691,273,3.132,274,2.575,275,3.132,276,2.575,277,2.427,278,3.132,279,2.575,280,2.575,281,2.575,282,2.575,283,2.575,284,2.575,285,2.575]],["title/modules/ConfigurationModule.html",[64,0.951,76,1.876]],["body/modules/ConfigurationModule.html",[0,0.016,3,0.315,4,0.273,5,0.273,20,0.031,27,0.575,29,0.553,34,0.315,61,0.016,62,0.022,63,0.016,64,1.52,66,1.863,76,2.661,84,1.81,89,2.212,104,3.322,286,3.413,287,3.413,288,3.413,289,3.413,290,3.413,291,4.294,292,3.413,293,3.413,294,3.413,295,3.413,296,3.413,297,3.413,298,3.413,299,3.413,300,3.413,301,3.413,302,3.413,303,5.711,304,3.413,305,2.855,306,2.855,307,3.413,308,3.413,309,2.855,310,3.413,311,3.413,312,3.413,313,3.413,314,3.413,315,3.413,316,3.413,317,3.413,318,3.413,319,3.413,320,3.413,321,3.413,322,3.413,323,2.855]],["title/classes/CreateUserDto.html",[0,0.015,324,1.876]],["body/classes/CreateUserDto.html",[0,0.023,2,1.74,3,0.361,4,0.313,5,0.313,10,0.575,17,1.156,20,0.03,22,0.973,27,0.411,34,0.361,47,2.361,61,0.019,62,0.024,63,0.019,138,2.645,226,2.216,324,2.912,325,4.59,326,2.854,327,3.557,328,3.557,329,5.489,330,3.917,331,5.489,332,3.917,333,3.276]],["title/modules/DatabaseModule.html",[64,0.951,77,1.876]],["body/modules/DatabaseModule.html",[0,0.017,3,0.344,4,0.298,5,0.298,15,3.118,20,0.031,22,0.727,27,0.563,29,0.604,34,0.344,61,0.018,62,0.023,63,0.018,64,1.43,66,1.523,72,2.176,77,2.82,84,2.562,88,4.744,89,2.416,104,2.716,105,3.118,106,3.118,197,1.976,212,1.976,291,4.041,309,3.118,334,3.728,335,4.041,336,2.416,337,3.728,338,3.118,339,3.728,340,3.728,341,3.728,342,3.728,343,3.728,344,3.728,345,3.728,346,3.728]],["title/controllers/HealthController.html",[130,1.556,347,2.082]],["body/controllers/HealthController.html",[0,0.014,3,0.274,4,0.237,5,0.237,10,0.436,11,1.441,17,0.688,20,0.031,25,1.032,27,0.435,29,0.482,34,0.274,59,2.485,61,0.014,62,0.02,63,0.014,130,1.439,132,1.439,134,2.165,138,1.575,154,0.953,186,1.214,200,2.416,347,2.688,348,2.485,349,4.148,350,5.635,351,2.971,352,2.971,353,4.148,354,4.148,355,4.148,356,4.148,357,4.148,358,2.165,359,2.971,360,2.971,361,1.734,362,4.148,363,4.778,364,2.971,365,2.971,366,2.971,367,2.971,368,4.148,369,2.971,370,3.469,371,2.971,372,2.971,373,2.971,374,5.171,375,2.971,376,2.971,377,2.971,378,2.971,379,2.971,380,2.971,381,2.971,382,2.971,383,2.971,384,2.971,385,2.971,386,2.971,387,2.971]],["title/modules/HealthModule.html",[64,0.951,78,1.876]],["body/modules/HealthModule.html",[0,0.02,3,0.392,4,0.339,5,0.339,20,0.031,27,0.598,29,0.689,34,0.392,61,0.02,62,0.025,63,0.02,64,1.554,66,1.737,78,3.065,84,2.253,132,2.543,347,3.692,358,3.096,388,4.25,389,5.251,390,4.25]],["title/injectables/JwtAuthGuard.html",[182,0.627,391,2.082]],["body/injectables/JwtAuthGuard.html",[0,0.021,3,0.41,4,0.355,5,0.355,20,0.03,27,0.567,29,0.722,34,0.41,61,0.021,62,0.026,63,0.021,165,2.36,182,1.053,183,1.818,225,2.156,391,3.5,392,3.722,393,3.243,394,3.722,395,4.451]],["title/injectables/JwtStrategy.html",[159,1.876,182,0.627]],["body/injectables/JwtStrategy.html",[0,0.016,3,0.316,4,0.274,5,0.274,10,0.503,11,1.588,17,1.059,19,1.19,20,0.031,21,1.099,22,0.668,23,1.19,25,1.19,27,0.576,29,0.556,34,0.316,61,0.016,62,0.022,63,0.016,107,1.787,154,1.099,159,2.669,165,1.817,167,2.221,168,2.866,173,2.497,175,2.497,178,2.866,182,0.892,183,1.4,186,2.102,197,1.817,214,2.866,225,1.66,323,2.866,396,2.866,397,3.824,398,3.427,399,4.572,400,3.427,401,2.866,402,3.427,403,2.497,404,2.866,405,2.497,406,3.427,407,3.427,408,3.427,409,3.427,410,2,411,3.427,412,3.427]],["title/injectables/LocalAuthGuard.html",[146,2.082,182,0.627]],["body/injectables/LocalAuthGuard.html",[0,0.021,3,0.41,4,0.355,5,0.355,20,0.03,27,0.567,29,0.722,34,0.41,61,0.021,62,0.026,63,0.021,146,3.5,165,2.36,182,1.053,183,1.818,225,2.156,393,3.243,394,3.722,413,3.722,414,4.451]],["title/injectables/LocalStrategy.html",[160,1.876,182,0.627]],["body/injectables/LocalStrategy.html",[0,0.015,3,0.292,4,0.253,5,0.253,10,0.466,11,1.507,17,1.005,19,1.507,20,0.031,21,1.391,22,0.846,23,1.507,25,1.101,27,0.558,29,0.514,34,0.292,35,1.409,47,2.349,57,1.681,61,0.015,62,0.021,63,0.015,107,1.718,144,2.784,145,2.31,150,2.31,154,1.017,160,2.532,165,1.681,175,2.31,182,0.846,183,1.296,186,1.296,193,1.586,197,1.681,198,1.927,201,1.681,212,2.819,225,1.536,397,3.628,401,2.652,403,2.31,404,2.652,405,2.31,415,2.652,416,3.171,417,3.171,418,4.338,419,3.171,420,4.338,421,2.652,422,3.171,423,3.171]],["title/classes/Role.html",[0,0.015,237,1.21]],["body/classes/Role.html",[0,0.016,2,1.56,3,0.324,4,0.28,5,0.28,10,0.516,17,1.207,20,0.031,21,1.67,22,1.081,27,0.488,34,0.324,47,1.899,61,0.017,62,0.022,63,0.017,138,2.761,193,1.67,226,2.064,237,2.087,277,3.011,361,2.05,410,3.04,424,2.937,425,3.794,426,3.011,427,4.356,428,3.512,429,4.356,430,3.512,431,3.512,432,3.512,433,3.512,434,2.05,435,4.647,436,3.512]],["title/classes/Serializable.html",[0,0.015,227,1.556]],["body/classes/Serializable.html",[0,0.018,2,1.693,3,0.351,4,0.304,5,0.304,10,0.56,17,1.136,19,1.324,20,0.03,21,1.222,22,0.956,23,1.324,26,3.188,27,0.4,34,0.351,61,0.018,62,0.023,63,0.018,126,3.706,186,1.557,198,1.693,226,2.177,227,2.374,235,2.407,236,2.47,237,2.04,239,2.873,251,3.033,437,3.188,438,3.812,439,3.812,440,4.1,441,3.812,442,3.812]],["title/classes/SerializedUserDTO.html",[0,0.015,443,2.082]],["body/classes/SerializedUserDTO.html",[0,0.019,2,1.869,3,0.388,4,0.336,5,0.336,10,0.618,17,1.209,20,0.029,22,1.018,34,0.388,47,2.423,61,0.02,62,0.025,63,0.02,226,2.318,326,3.066,327,3.675,328,3.675,443,3.381,444,4.744,445,4.208,446,4.208]],["title/injectables/SerializerInterceptor.html",[129,1.704,182,0.627]],["body/injectables/SerializerInterceptor.html",[0,0.011,3,0.212,4,0.183,5,0.183,8,1.673,10,0.337,11,1.195,17,0.797,19,1.195,20,0.031,21,1.103,22,0.671,23,1.195,25,1.195,27,0.541,29,0.372,30,2.009,31,3.756,34,0.317,35,2.037,41,1.673,46,1.673,61,0.016,62,0.016,63,0.011,107,1.434,129,1.825,154,1.714,182,0.671,183,0.938,193,1.323,198,1.529,200,1.834,201,1.825,206,3.007,213,1.673,221,1.34,222,1.488,224,1.673,225,1.112,227,1.999,228,3.835,229,3.835,230,2.878,231,3.452,232,1.673,233,1.92,234,1.92,235,2.037,236,1.488,237,1.726,238,1.92,239,1.217,240,2.878,241,1.92,242,1.92,243,1.92,244,3.835,245,2.497,246,1.92,247,2.878,248,1.92,249,1.92,250,1.92,251,2.188,252,2.878,253,1.92,254,1.673,255,1.92,256,1.92,257,1.673,258,1.92,259,1.92,260,1.92,261,1.92,447,3.442,448,3.442,449,2.296,450,2.296,451,2.296]],["title/classes/User.html",[0,0.015,193,1.03]],["body/classes/User.html",[0,0.017,2,1.104,3,0.229,4,0.198,5,0.198,10,0.365,17,1.303,20,0.031,22,1.097,27,0.454,34,0.229,47,2.346,61,0.012,62,0.017,63,0.012,138,2.813,154,0.797,186,1.767,193,1.627,197,2.292,212,2.526,226,1.621,235,2.255,237,1.998,277,2.364,327,2.802,328,2.802,361,1.45,410,2.524,426,2.364,427,2.078,429,3.051,452,2.078,453,3.649,454,3.616,455,2.484,456,5.626,457,2.484,458,3.649,459,2.484,460,2.484,461,2.484,462,2.484,463,4.765,464,2.484,465,2.484,466,2.484,467,2.484,468,3.649,469,3.649,470,2.078,471,2.484,472,2.078,473,2.484,474,2.484,475,3.649,476,2.484,477,3.649,478,2.484,479,2.484,480,2.484,481,2.484]],["title/injectables/UserSerializerService.html",[182,0.627,482,1.704]],["body/injectables/UserSerializerService.html",[0,0.01,3,0.199,4,0.173,5,0.173,10,0.317,11,1.142,17,1.167,19,1.662,20,0.031,21,1.534,22,0.933,23,1.662,25,1.662,27,0.529,29,0.35,34,0.199,35,1.461,61,0.01,62,0.016,63,0.01,107,1.662,126,2.882,154,0.693,182,0.641,183,0.883,186,1.626,193,1.616,198,1.975,200,1.768,201,1.146,212,1.146,225,1.593,226,0.96,227,1.593,235,2.398,237,2.123,239,1.146,245,1.047,251,2.931,262,3.394,263,1.575,264,1.575,265,2.75,266,2.75,267,2.75,268,2.75,269,1.808,270,4.514,272,2.75,273,1.808,275,3.328,277,2.131,278,1.808,405,1.575,434,1.262,443,1.401,482,1.743,483,2.899,484,2.162,485,2.162,486,4.447,487,2.162,488,2.162,489,2.162,490,2.162,491,2.162,492,1.575,493,1.575,494,2.162,495,1.808,496,3.288,497,1.808,498,2.162,499,2.162,500,2.162,501,2.162,502,2.162,503,3.288,504,2.162,505,3.288,506,2.162,507,2.162]],["title/controllers/UsersController.html",[130,1.556,508,2.082]],["body/controllers/UsersController.html",[0,0.011,3,0.228,4,0.197,5,0.197,10,0.363,11,1.262,17,0.998,19,1.497,20,0.031,21,1.382,22,0.708,23,1.497,25,1.497,27,0.575,29,0.4,30,1.442,34,0.228,35,1.097,47,1.009,57,1.926,61,0.012,62,0.017,63,0.012,107,1.497,129,1.309,130,1.759,132,1.196,134,1.799,138,2.285,141,3.038,142,3.604,143,2.066,148,2.066,154,1.624,186,1.009,188,2.087,193,1.624,200,1.614,239,1.309,251,1.309,254,1.799,324,3.091,391,1.601,410,2.121,425,1.799,426,2.792,434,1.442,482,2.285,492,1.799,493,1.799,508,2.354,509,2.066,510,3.038,511,3.038,512,3.633,513,2.066,514,2.47,515,2.47,516,3.633,517,2.47,518,2.47,519,2.47,520,2.47,521,2.066,522,2.066,523,2.47,524,2.47,525,2.47,526,3.633,527,2.47,528,2.47,529,3.633,530,2.47,531,2.47,532,2.47,533,2.47,534,2.47,535,2.47,536,2.47,537,2.47,538,2.47,539,2.47,540,2.47,541,3.633,542,2.47,543,2.47,544,2.47]],["title/modules/UsersModule.html",[64,0.951,79,1.704]],["body/modules/UsersModule.html",[0,0.015,3,0.301,4,0.261,5,0.261,20,0.031,27,0.609,29,0.53,34,0.301,61,0.016,62,0.021,63,0.016,64,1.487,66,1.335,67,1.733,68,2.118,69,2.118,70,1.733,71,3.255,72,2.932,79,3.243,80,2.87,81,2.118,82,2.118,84,1.733,132,2.145,188,3.046,193,1.42,335,2.734,336,2.118,434,1.908,482,3.076,493,2.381,508,3.255,522,2.734,545,2.734,546,2.734,547,2.734,548,3.269,549,3.269,550,3.269]],["title/injectables/UsersService.html",[182,0.627,188,1.556]],["body/injectables/UsersService.html",[0,0.008,3,0.165,4,0.143,5,0.143,10,0.263,11,0.987,17,1.175,19,1.523,20,0.031,21,1.406,22,0.953,23,1.523,25,1.523,27,0.49,29,0.291,34,0.262,35,0.796,47,1.906,57,1.873,61,0.009,62,0.013,63,0.009,107,2.006,154,1.289,174,1.306,177,1.306,182,0.554,183,0.732,186,0.732,188,1.377,193,1.567,197,2.324,198,2.377,200,2.253,201,0.95,212,1.873,215,1.499,226,1.263,235,0.796,237,1.514,239,2.473,245,0.868,324,2.559,327,2.289,328,2.289,336,1.161,361,1.046,410,2.559,425,2.929,426,2.289,434,1.046,454,2.954,492,1.306,510,2.377,511,2.377,513,2.377,521,1.499,551,1.499,552,4.021,553,4.021,554,2.843,555,2.843,556,1.792,557,3.666,558,2.843,559,3.533,560,1.792,561,1.792,562,2.843,563,1.792,564,2.843,565,1.792,566,2.843,567,1.792,568,2.843,569,1.792,570,1.792,571,2.843,572,1.792,573,1.306,574,4.889,575,4.665,576,1.792,577,3.533,578,1.499,579,1.792,580,1.306,581,1.792,582,1.792,583,1.792,584,1.792,585,1.792,586,1.792,587,1.792,588,1.792,589,1.792,590,1.792,591,1.792,592,1.792,593,1.792]],["title/coverage.html",[594,3.189]],["body/coverage.html",[0,0.026,1,1.782,5,0.22,6,2.3,7,2.3,20,0.031,22,0.536,57,1.458,61,0.013,62,0.019,63,0.013,70,1.458,129,1.458,130,2.218,131,1.782,133,2.3,144,1.332,146,1.782,159,1.605,160,1.605,167,1.782,182,1.128,184,2.3,188,1.332,193,0.882,221,1.605,222,1.782,224,2.861,227,1.332,237,1.035,262,1.782,263,2.003,264,2.861,324,1.605,325,2.3,326,2.861,347,1.782,348,2.3,391,1.782,392,2.3,393,2.861,396,2.3,413,2.3,415,2.3,424,2.3,437,2.3,440,2.3,443,1.782,444,2.3,452,2.3,482,1.458,483,2.003,508,1.782,509,2.3,551,2.3,594,2.003,595,2.75,596,2.75,597,2.75,598,6.409,599,4.996,600,4.581,601,2.3,602,2.75,603,4.996,604,5.495,605,2.3,606,2.75,607,2.75,608,2.75,609,2.75,610,2.75,611,2.75]],["title/dependencies.html",[67,2.048,612,2.687]],["body/dependencies.html",[0,0.02,20,0.031,29,0.52,32,3.892,61,0.015,62,0.021,63,0.015,67,1.7,89,2.078,93,2.682,95,2.682,163,2.336,165,1.7,173,2.336,232,2.336,333,2.682,336,2.078,338,2.682,358,2.336,361,1.872,403,3.624,421,2.682,470,2.682,495,2.682,613,3.207,614,3.207,615,5.769,616,3.207,617,3.207,618,3.207,619,3.207,620,3.207,621,3.207,622,3.207,623,3.207,624,3.207,625,3.207,626,3.207,627,3.207,628,3.207,629,3.207,630,3.207,631,3.207,632,3.207,633,3.207,634,3.207,635,3.207,636,3.207,637,3.207,638,3.207,639,3.207,640,3.207,641,3.207,642,3.207,643,3.207,644,3.207,645,3.207,646,3.207,647,3.207,648,3.207,649,3.207,650,3.207,651,3.207]],["title/miscellaneous/enumerations.html",[652,1.425,653,3.231]],["body/miscellaneous/enumerations.html",[10,0.637,20,0.03,61,0.021,62,0.025,63,0.021,235,2.361,245,2.978,472,3.627,483,3.16,573,3.16,578,3.627,580,3.16,652,2.299,653,3.627,654,4.337,655,5.316,656,4.337,657,4.337,658,4.337,659,4.337,660,4.337,661,4.337]],["title/miscellaneous/functions.html",[652,1.425,662,3.231]],["body/miscellaneous/functions.html",[10,0.713,20,0.027,61,0.023,62,0.027,63,0.023,70,3.199,605,4.063,652,2.576,662,4.063,663,4.858]],["title/index.html",[10,0.395,664,2.687,665,2.687]],["body/index.html",[4,0.259,20,0.03,52,2.713,61,0.015,62,0.021,63,0.015,208,2.713,305,2.713,306,3.685,370,2.713,497,2.713,557,2.713,594,2.363,666,3.244,667,3.244,668,4.406,669,3.244,670,3.244,671,3.244,672,3.244,673,3.244,674,3.244,675,3.244,676,3.244,677,3.244,678,5.004,679,3.244,680,3.244,681,5.921,682,3.244,683,3.244,684,3.244,685,5.789,686,3.244,687,3.244,688,4.406,689,3.244,690,3.244,691,3.244,692,4.406,693,3.244,694,3.244,695,3.244,696,4.406,697,4.406,698,3.244,699,3.244,700,3.244,701,3.244,702,3.244,703,2.713,704,3.244,705,3.244,706,3.244,707,3.244,708,3.244,709,3.244,710,3.244,711,3.244,712,3.244,713,3.244,714,3.244,715,3.244,716,3.244,717,3.244,718,3.244,719,3.244]],["title/modules.html",[66,1.789]],["body/modules.html",[20,0.025,61,0.021,62,0.025,63,0.021,65,2.825,66,1.781,75,2.545,76,2.545,77,2.545,78,2.545,79,2.311,703,4.819,720,5.762,721,5.762,722,6.266,723,5.762,724,5.762]],["title/overview.html",[725,3.661]],["body/overview.html",[2,1.409,20,0.03,61,0.015,62,0.021,63,0.015,64,0.939,65,4.055,66,1.296,67,1.681,68,2.055,69,2.055,70,1.681,71,2.055,72,1.851,73,2.652,74,2.652,75,3.624,76,2.886,77,2.886,78,2.886,79,3.223,80,2.811,81,2.055,82,2.055,132,1.536,144,2.395,156,2.652,158,2.652,159,2.886,160,2.886,183,1.296,188,2.851,221,1.851,482,2.622,545,2.652,546,2.652,547,2.652,573,2.31,580,2.31,725,2.652,726,3.171,727,3.171,728,3.171]],["title/miscellaneous/variables.html",[652,1.425,729,3.231]],["body/miscellaneous/variables.html",[10,0.679,20,0.03,22,0.901,61,0.022,62,0.026,63,0.022,167,3.579,174,3.366,177,3.366,245,2.238,257,3.366,601,3.864,652,2.45,729,3.864,730,4.621,731,4.621]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["0.2.25",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":387,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.0",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":573,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["1.0.0",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["1.3.1",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":374,"title":{},"body":{"controllers/HealthController.html":{}}}],["10m",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["150",{"_index":378,"title":{},"body":{"controllers/HealthController.html":{}}}],["150mb",{"_index":375,"title":{},"body":{"controllers/HealthController.html":{}}}],["17.1.1",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":578,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["2.18.1",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":580,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["3.0.2",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["3.22.0",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":472,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["4.0.0",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["4.5.7",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":661,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["5.1.3",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":373,"title":{},"body":{"controllers/HealthController.html":{}}}],["500mb",{"_index":371,"title":{},"body":{"controllers/HealthController.html":{}}}],["6",{"_index":726,"title":{},"body":{"overview.html":{}}}],["6.5.4",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":728,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["7.0.1",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":382,"title":{},"body":{"controllers/HealthController.html":{}}}],["8",{"_index":727,"title":{},"body":{"overview.html":{}}}],["abortearly",{"_index":322,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["abstract",{"_index":267,"title":{},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{}}}],["ac",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["access_token",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["accessors",{"_index":453,"title":{},"body":{"classes/User.html":{}}}],["action",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["adds",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["admin",{"_index":656,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["allocated",{"_index":376,"title":{},"body":{"controllers/HealthController.html":{}}}],["allow('localhost",{"_index":313,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["allowunknown",{"_index":321,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["amazing",{"_index":704,"title":{},"body":{"index.html":{}}}],["angular",{"_index":676,"title":{},"body":{"index.html":{}}}],["app",{"_index":683,"title":{},"body":{"index.html":{}}}],["app_filter",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["app_pipe",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":673,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":65,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentshost",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["articles",{"_index":505,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["articleserializatorservice",{"_index":496,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["async",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":393,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/jwt",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["authcontroller",{"_index":131,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticatedrequest",{"_index":222,"title":{"interfaces/AuthenticatedRequest.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{},"coverage.html":{}}}],["authguard",{"_index":394,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":395,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":414,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":75,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":712,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":144,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":345,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["automatically",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":724,"title":{},"body":{"modules.html":{}}}],["await",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":705,"title":{},"body":{"index.html":{}}}],["based",{"_index":501,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["baseserializerservice",{"_index":262,"title":{"classes/BaseSerializerService.html":{}},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{},"coverage.html":{}}}],["baseserializerservice:10",{"_index":490,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["baseserializerservice:14",{"_index":488,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["baseserializerservice:18",{"_index":487,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["baseserializerservice:8",{"_index":489,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["bind",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["body",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["bootstrap",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":722,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":720,"title":{},"body":{"modules.html":{}}}],["building",{"_index":669,"title":{},"body":{"index.html":{}}}],["cache",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["cacheinterceptor",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.registerasync",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["callhandler",{"_index":228,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["campus",{"_index":659,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["catch",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["catch(exception",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["catch(httpexception",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["changeme",{"_index":576,"title":{},"body":{"injectables/UsersService.html":{}}}],["chris",{"_index":579,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/BaseSerializerService.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"classes/User.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BaseSerializerService.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"classes/User.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":545,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":546,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":547,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":429,"title":{},"body":{"classes/Role.html":{},"classes/User.html":{}}}],["column('text",{"_index":456,"title":{},"body":{"classes/User.html":{}}}],["column({type",{"_index":462,"title":{},"body":{"classes/User.html":{}}}],["comes",{"_index":498,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["compression",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":289,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservice.get('cache_ttl",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":339,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_name",{"_index":344,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_password",{"_index":342,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_port",{"_index":340,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_username",{"_index":341,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('multer_dest",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration/configuration.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configurationmodule",{"_index":76,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules.html":{},"overview.html":{}}}],["console.log('lleg",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log('paso",{"_index":254,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{},"controllers/UsersController.html":{}}}],["console.log(entity",{"_index":502,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["console.log(response",{"_index":259,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["const",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Serializable.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectrepository(user",{"_index":571,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":416,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(private",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(public",{"_index":442,"title":{},"body":{"classes/Serializable.html":{}}}],["constructor(serialize",{"_index":438,"title":{},"body":{"classes/Serializable.html":{}}}],["constructor(usersrepository",{"_index":556,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":450,"title":{},"body":{"injectables/SerializerInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":253,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["controller",{"_index":130,"title":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('health",{"_index":359,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('users",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":594,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":510,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":513,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":324,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.firstname",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.lastname",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["csurf",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getrequest",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getresponse",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["database",{"_index":343,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":77,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date().toisostring",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["db_host",{"_index":311,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["db_name",{"_index":319,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["db_password",{"_index":318,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["db_port",{"_index":315,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["db_username",{"_index":317,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["declarations",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"classes/Role.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":308,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["default('localhost",{"_index":314,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["defaultstrategy",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseSerializerService.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":67,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":677,"title":{},"body":{"index.html":{}}}],["dest",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["development",{"_index":684,"title":{},"body":{"index.html":{}}}],["development.env",{"_index":298,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["disable",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["disk",{"_index":363,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":357,"title":{},"body":{"controllers/HealthController.html":{}}}],["dns",{"_index":360,"title":{},"body":{"controllers/HealthController.html":{}}}],["dnshealthindicator",{"_index":354,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":575,"title":{},"body":{"injectables/UsersService.html":{}}}],["down",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/create",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/serialized",{"_index":491,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["e",{"_index":270,"title":{},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{}}}],["e2e",{"_index":693,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":670,"title":{},"body":{"index.html":{}}}],["enable",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":277,"title":{},"body":{"classes/BaseSerializerService.html":{},"classes/Role.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{}}}],["entity.charters",{"_index":507,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["enum",{"_index":463,"title":{},"body":{"classes/User.html":{}}}],["enumerations",{"_index":653,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envfilepath",{"_index":297,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["error",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["eslint",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/camelcase",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/no",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["exceed",{"_index":381,"title":{},"body":{"controllers/HealthController.html":{}}}],["exception",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.filter",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["exception.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:6",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getresponse",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exclude",{"_index":468,"title":{},"body":{"classes/User.html":{}}}],["executioncontext",{"_index":229,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["expandvariables",{"_index":299,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["expiresin",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["expose",{"_index":469,"title":{},"body":{"classes/User.html":{}}}],["express",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["extends",{"_index":225,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{}}}],["extractjwt",{"_index":402,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":407,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":323,"title":{},"body":{"modules/ConfigurationModule.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":553,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":511,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(username",{"_index":562,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":554,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":564,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SerializedUserDTO.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":668,"title":{},"body":{"index.html":{}}}],["from(this.serializeresponse(response",{"_index":260,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["full",{"_index":383,"title":{},"body":{"controllers/HealthController.html":{}}}],["fullname",{"_index":454,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["function",{"_index":440,"title":{},"body":{"classes/Serializable.html":{},"coverage.html":{}}}],["functions",{"_index":662,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":516,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@healthcheck",{"_index":351,"title":{},"body":{"controllers/HealthController.html":{}}}],["getfullname",{"_index":466,"title":{},"body":{"classes/User.html":{}}}],["getprofile",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":518,"title":{},"body":{"controllers/UsersController.html":{}}}],["getting",{"_index":664,"title":{"index.html":{}},"body":{}}],["global",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["globally",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["graph",{"_index":723,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":700,"title":{},"body":{"index.html":{}}}],["guards/local",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["guess",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["hapi/joi",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["health",{"_index":349,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":390,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":350,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":353,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":347,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":78,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heavily",{"_index":674,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["helpers/http",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["here",{"_index":497,"title":{},"body":{"injectables/UserSerializerService.html":{},"index.html":{}}}],["host",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/DatabaseModule.html":{}}}],["host.switchtohttp",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpexception",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["https://google.com",{"_index":366,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://nestjs.com",{"_index":716,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["id",{"_index":410,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Role.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":408,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["import",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inherited",{"_index":486,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["inject",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["injectable",{"_index":182,"title":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":570,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":675,"title":{},"body":{"index.html":{}}}],["installation",{"_index":680,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":682,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["intercept",{"_index":447,"title":{},"body":{"injectables/SerializerInterceptor.html":{}}}],["intercept(context",{"_index":252,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["interceptor",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["interface",{"_index":221,"title":{"interfaces/AuthenticatedRequest.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":223,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{}}}],["internal",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["isglobal",{"_index":290,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["isint",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["it's",{"_index":294,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["john",{"_index":574,"title":{},"body":{"injectables/UsersService.html":{}}}],["joi",{"_index":287,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.number().default(3000",{"_index":310,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.number().default(3306",{"_index":316,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.object",{"_index":301,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.string",{"_index":303,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["join",{"_index":707,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":391,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":406,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":159,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":713,"title":{},"body":{"index.html":{}}}],["key",{"_index":244,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["lastname",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SerializedUserDTO.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":719,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":697,"title":{},"body":{"index.html":{}}}],["limit",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["line",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["loaded",{"_index":295,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["local",{"_index":421,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":146,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":160,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["lodash",{"_index":495,"title":{},"body":{"injectables/UserSerializerService.html":{},"dependencies.html":{}}}],["logger",{"_index":552,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger(usersservice.name",{"_index":568,"title":{},"body":{"injectables/UsersService.html":{}}}],["logic",{"_index":499,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["login",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["manager",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["manuel",{"_index":476,"title":{},"body":{"classes/User.html":{}}}],["manuucci96",{"_index":474,"title":{},"body":{"classes/User.html":{}}}],["manytoone",{"_index":480,"title":{},"body":{"classes/User.html":{}}}],["maria",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{}}}],["markserializablecollection",{"_index":265,"title":{},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{}}}],["markserializablecollection(values",{"_index":269,"title":{},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{}}}],["markserializablevalue",{"_index":266,"title":{},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{}}}],["markserializablevalue(value",{"_index":273,"title":{},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{}}}],["matching",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["memory",{"_index":362,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":356,"title":{},"body":{"controllers/HealthController.html":{}}}],["message",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["metadata",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseSerializerService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":652,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":696,"title":{},"body":{"index.html":{}}}],["mode",{"_index":688,"title":{},"body":{"index.html":{}}}],["module",{"_index":64,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":66,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":370,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["multermodule",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule.registerasync",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql",{"_index":338,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["myśliwiec",{"_index":714,"title":{},"body":{"index.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseSerializerService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":292,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["nest",{"_index":678,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":718,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":230,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["nestjs/terminus",{"_index":358,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":336,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BaseSerializerService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["next",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["next.handle().pipe",{"_index":255,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["node.js",{"_index":667,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":302,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["npm",{"_index":681,"title":{},"body":{"index.html":{}}}],["nucci",{"_index":478,"title":{},"body":{"classes/User.html":{}}}],["null",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["number",{"_index":426,"title":{},"body":{"classes/Role.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":257,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["object.keys(response).map(async",{"_index":243,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["observable",{"_index":231,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["of(response",{"_index":258,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["omit",{"_index":494,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["omit(entity",{"_index":504,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["ommit",{"_index":500,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["once",{"_index":293,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["onetomany",{"_index":435,"title":{},"body":{"classes/Role.html":{}}}],["onetomany(undefined",{"_index":431,"title":{},"body":{"classes/Role.html":{}}}],["open",{"_index":698,"title":{},"body":{"index.html":{}}}],["optional",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseSerializerService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Serializable.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":725,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":612,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseSerializerService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Serializable.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["pass",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":403,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":401,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":404,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"injectables/UsersService.html":{}}}],["path",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/HealthController.html":{}}}],["payload",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pipe",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["please",{"_index":708,"title":{},"body":{"index.html":{}}}],["por",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["port",{"_index":309,"title":{},"body":{"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{}}}],["post",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":427,"title":{},"body":{"classes/Role.html":{},"classes/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":458,"title":{},"body":{"classes/User.html":{}}}],["private",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"controllers/HealthController.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":368,"title":{},"body":{"controllers/HealthController.html":{}}}],["production",{"_index":305,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["professorship",{"_index":660,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["progressive",{"_index":666,"title":{},"body":{"index.html":{}}}],["project",{"_index":699,"title":{},"body":{"index.html":{}}}],["promise",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"injectables/LocalStrategy.html":{},"classes/Serializable.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":242,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["promise.all(values.map(v",{"_index":282,"title":{},"body":{"classes/BaseSerializerService.html":{}}}],["properties",{"_index":226,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreateUserDto.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"injectables/UsersService.html":{}}}],["provide",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provision",{"_index":307,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["public",{"_index":251,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"classes/Serializable.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{}}}],["rate",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":709,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":239,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/Serializable.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":555,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove(id",{"_index":566,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":557,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{},"controllers/UsersController.html":{}}}],["request.url",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["request.user?.role",{"_index":261,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["require('@hapi/joi",{"_index":288,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["res",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["response.message",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["response.status(status).json",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["response[key",{"_index":246,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["responses",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["result",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result[key",{"_index":250,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["results",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseSerializerService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":237,"title":{"classes/Role.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["role.ts",{"_index":655,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["role.users",{"_index":436,"title":{},"body":{"classes/Role.html":{}}}],["root",{"_index":296,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["run",{"_index":685,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":232,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":234,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["scalable",{"_index":671,"title":{},"body":{"index.html":{}}}],["scholarship",{"_index":658,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["secret",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":409,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["serializable",{"_index":227,"title":{"classes/Serializable.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"classes/Serializable.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"coverage.html":{}}}],["serializable(this.serialize.bind(this",{"_index":284,"title":{},"body":{"classes/BaseSerializerService.html":{}}}],["serializable(this.serializecollection.bind(this",{"_index":285,"title":{},"body":{"classes/BaseSerializerService.html":{}}}],["serialization/serializer.interceptor",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseSerializerService.html":{},"classes/Serializable.html":{},"injectables/UserSerializerService.html":{}}}],["serialize(entity",{"_index":275,"title":{},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{}}}],["serializecollection",{"_index":268,"title":{},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{}}}],["serializecollection(values",{"_index":278,"title":{},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{}}}],["serialized",{"_index":281,"title":{},"body":{"classes/BaseSerializerService.html":{}}}],["serializedproperties",{"_index":241,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["serializedproperties.reduce((result",{"_index":249,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["serializeduserdto",{"_index":443,"title":{"classes/SerializedUserDTO.html":{}},"body":{"classes/SerializedUserDTO.html":{},"injectables/UserSerializerService.html":{},"coverage.html":{}}}],["serializedvalue",{"_index":247,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["serializer.service",{"_index":493,"title":{},"body":{"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["serializer.service.ts",{"_index":264,"title":{},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{},"coverage.html":{}}}],["serializer.service.ts:10",{"_index":279,"title":{},"body":{"classes/BaseSerializerService.html":{}}}],["serializer.service.ts:14",{"_index":274,"title":{},"body":{"classes/BaseSerializerService.html":{}}}],["serializer.service.ts:15",{"_index":485,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["serializer.service.ts:18",{"_index":271,"title":{},"body":{"classes/BaseSerializerService.html":{}}}],["serializer.service.ts:8",{"_index":276,"title":{},"body":{"classes/BaseSerializerService.html":{}}}],["serializer.service.ts:9",{"_index":484,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["serializeresponse",{"_index":448,"title":{},"body":{"injectables/SerializerInterceptor.html":{}}}],["serializeresponse(response",{"_index":240,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["serializerinterceptor",{"_index":129,"title":{"injectables/SerializerInterceptor.html":{}},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["server",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["set",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":672,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["size",{"_index":384,"title":{},"body":{"controllers/HealthController.html":{}}}],["slow",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"modules/ConfigurationModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":702,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":663,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user",{"_index":654,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:19",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:6",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":601,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/jwt",{"_index":392,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":413,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":396,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:16",{"_index":400,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":398,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":415,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:12",{"_index":419,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:7",{"_index":417,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/configuration/configuration.module.ts",{"_index":286,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["src/database/database.module.ts",{"_index":334,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/health/health.controller.ts",{"_index":348,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:23",{"_index":352,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":388,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/helpers/http",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":605,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/serialization/base",{"_index":263,"title":{},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{},"coverage.html":{}}}],["src/serialization/serializable.ts",{"_index":437,"title":{},"body":{"classes/Serializable.html":{},"coverage.html":{}}}],["src/serialization/serializable.ts:3",{"_index":439,"title":{},"body":{"classes/Serializable.html":{}}}],["src/serialization/serializable.ts:4",{"_index":441,"title":{},"body":{"classes/Serializable.html":{}}}],["src/serialization/serializer.interceptor.ts",{"_index":224,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{},"coverage.html":{}}}],["src/serialization/serializer.interceptor.ts:14",{"_index":451,"title":{},"body":{"injectables/SerializerInterceptor.html":{}}}],["src/serialization/serializer.interceptor.ts:42",{"_index":449,"title":{},"body":{"injectables/SerializerInterceptor.html":{}}}],["src/users/dto/create",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/serialized",{"_index":444,"title":{},"body":{"classes/SerializedUserDTO.html":{},"coverage.html":{}}}],["src/users/role.entity.ts",{"_index":424,"title":{},"body":{"classes/Role.html":{},"coverage.html":{}}}],["src/users/role.entity.ts:10",{"_index":430,"title":{},"body":{"classes/Role.html":{}}}],["src/users/role.entity.ts:16",{"_index":433,"title":{},"body":{"classes/Role.html":{}}}],["src/users/role.entity.ts:7",{"_index":428,"title":{},"body":{"classes/Role.html":{}}}],["src/users/user",{"_index":483,"title":{},"body":{"injectables/UserSerializerService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/user.entity.ts",{"_index":452,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:16",{"_index":459,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:19",{"_index":465,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:22",{"_index":457,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:25",{"_index":460,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":467,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":461,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:43",{"_index":464,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:6",{"_index":455,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":509,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:19",{"_index":517,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:24",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:30",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":548,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":551,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":569,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:13",{"_index":558,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:49",{"_index":560,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:58",{"_index":561,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":565,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:67",{"_index":563,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:71",{"_index":567,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":686,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":689,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":690,"title":{},"body":{"index.html":{}}}],["started",{"_index":665,"title":{"index.html":{}},"body":{}}],["starter",{"_index":679,"title":{},"body":{"index.html":{}}}],["statements",{"_index":597,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["statuscode",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["stay",{"_index":710,"title":{},"body":{"index.html":{}}}],["storage",{"_index":380,"title":{},"body":{"controllers/HealthController.html":{}}}],["strategies/jwt.strategy",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/SerializedUserDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["strippedentity",{"_index":503,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["student",{"_index":657,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sub",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":405,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UserSerializerService.html":{}}}],["support",{"_index":703,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":721,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["switchmap",{"_index":233,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["switchmap(response",{"_index":256,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["synchronize",{"_index":346,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["t",{"_index":280,"title":{},"body":{"classes/BaseSerializerService.html":{}}}],["table",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["terminusmodule",{"_index":389,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":306,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["test:covsupport",{"_index":695,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":694,"title":{},"body":{"index.html":{}}}],["tests",{"_index":692,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":701,"title":{},"body":{"index.html":{}}}],["this.articleserializatorservice.serializecollectionforrole",{"_index":506,"title":{},"body":{"injectables/UserSerializerService.html":{}}}],["this.authservice.login(req.user",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":422,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.disk.checkstorage('storage",{"_index":385,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.dns.pingcheck('google",{"_index":365,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.firstname",{"_index":475,"title":{},"body":{"classes/User.html":{}}}],["this.health.check",{"_index":364,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.id",{"_index":471,"title":{},"body":{"classes/User.html":{}}}],["this.jwtservice.sign(payload",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.lastname",{"_index":477,"title":{},"body":{"classes/User.html":{}}}],["this.logger.log('find",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.logger.log('llego",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":372,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('memory_rss",{"_index":377,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.password",{"_index":479,"title":{},"body":{"classes/User.html":{}}}],["this.serialize(v",{"_index":283,"title":{},"body":{"classes/BaseSerializerService.html":{}}}],["this.typeorm.pingcheck('database",{"_index":367,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.username",{"_index":473,"title":{},"body":{"classes/User.html":{}}}],["this.users",{"_index":572,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.users.find(user",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userserializerservice.markserializablevalue(new",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersrepository.delete(id",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone(id",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.findone(username",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(id",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["thresholdpercent",{"_index":386,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":423,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["timestamp",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["touch",{"_index":711,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":470,"title":{},"body":{"classes/User.html":{},"dependencies.html":{}}}],["true",{"_index":291,"title":{},"body":{"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{}}}],["ttl",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":717,"title":{},"body":{"index.html":{}}}],["type",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"classes/Serializable.html":{},"classes/SerializedUserDTO.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["typeorm",{"_index":361,"title":{},"body":{"controllers/HealthController.html":{},"classes/Role.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormhealthindicator",{"_index":355,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":335,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":550,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":337,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typescript",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["ui",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":420,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":432,"title":{},"body":{"classes/Role.html":{}}}],["unit",{"_index":691,"title":{},"body":{"index.html":{}}}],["unused",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["up",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["uri",{"_index":312,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["use",{"_index":369,"title":{},"body":{"controllers/HealthController.html":{}}}],["useclass",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":379,"title":{},"body":{"controllers/HealthController.html":{}}}],["usefactory",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["useguards",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(serializerinterceptor",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":193,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":492,"title":{},"body":{"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SerializedUserDTO.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":445,"title":{},"body":{"classes/SerializedUserDTO.html":{}}}],["user.dto.ts:3",{"_index":446,"title":{},"body":{"classes/SerializedUserDTO.html":{}}}],["user.dto.ts:5",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":434,"title":{},"body":{"classes/Role.html":{},"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.id",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.lastname",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":481,"title":{},"body":{"classes/User.html":{}}}],["user.username",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":235,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"classes/Serializable.html":{},"injectables/SerializerInterceptor.html":{},"classes/User.html":{},"injectables/UserSerializerService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":577,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":425,"title":{},"body":{"classes/Role.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":549,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user",{"_index":236,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"classes/Serializable.html":{},"injectables/SerializerInterceptor.html":{}}}],["users/user.entity",{"_index":238,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["users/users.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":508,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userserializerservice",{"_index":482,"title":{"injectables/UserSerializerService.html":{}},"body":{"injectables/UserSerializerService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":79,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":559,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":188,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["valid('development",{"_index":304,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["validate",{"_index":397,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":399,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":418,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validated",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["validateuser",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["validationoptions",{"_index":320,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["validationpipe",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["validationschema",{"_index":300,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["validator",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":245,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/BaseSerializerService.html":{},"injectables/SerializerInterceptor.html":{},"injectables/UserSerializerService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.serialize(role",{"_index":248,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/SerializerInterceptor.html":{}}}],["values",{"_index":272,"title":{},"body":{"classes/BaseSerializerService.html":{},"injectables/UserSerializerService.html":{}}}],["variable",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":729,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["void",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/Serializable.html":{}}}],["watch",{"_index":687,"title":{},"body":{"index.html":{}}}],["website",{"_index":715,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":706,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/http-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/http-exception.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class AllExceptionsFilter implements ExceptionFilter {\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n\n        const status = exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        let message;\n        if (exception instanceof HttpException) {\n            const response: any = exception.getResponse();\n            if (typeof response == 'string') {\n                message = response;\n            } else {\n                // Pipe validation exception\n                message = response.message;\n            }\n        } else {\n            message = 'Internal Server Error';\n        }\n\n        response.status(status).json({\n            statusCode: status,\n            message: message,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n        });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigurationModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheInterceptor, CacheModule, Module, ValidationPipe } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { APP_FILTER, APP_INTERCEPTOR, APP_PIPE } from '@nestjs/core';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { AuthModule } from './auth/auth.module';\nimport { ConfigurationModule } from './configuration/configuration.module';\nimport { DatabaseModule } from './database/database.module';\nimport { HealthModule } from './health/health.module';\nimport { AllExceptionsFilter } from './helpers/http-exception.filter';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n    imports: [\n        AuthModule,\n        CacheModule.registerAsync({\n            // imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: async (configService: ConfigService) => ({\n                ttl: configService.get('CACHE_TTL'),\n            }),\n        }),\n        ConfigurationModule,\n        DatabaseModule,\n        HealthModule,\n        MulterModule.registerAsync({\n            // imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: async (configService: ConfigService) => ({\n                dest: configService.get('MULTER_DEST'),\n            }),\n        }),\n        UsersModule,\n    ],\n    providers: [\n        // Enable CacheInterceptor globally\n        // Bind CacheInterceptor to all endpoints globally\n        {\n            provide: APP_INTERCEPTOR,\n            useClass: CacheInterceptor,\n        },\n\n        // Enable AllExceptionsFilter globally\n        {\n            provide: APP_FILTER,\n            useClass: AllExceptionsFilter,\n        },\n\n        // Enable ValidationPipe globally (every DTO is automatically validated)\n        {\n            provide: APP_PIPE,\n            useClass: ValidationPipe,\n        },\n\n        // Set up global interceptor to serialize responses\n        // {\n        //     provide: APP_INTERCEPTOR,\n        //     // useClass: ClassSerializerInterceptor,\n        //     useClass: SerializerInterceptor,\n        // },\n    ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Request, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private authService: AuthService) {}\n\n    @UseGuards(LocalAuthGuard)\n    @Post('login')\n    async login(@Request() req) {\n        return this.authService.login(req.user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from './../users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { jwtConstants } from './constants';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n@Module({\n    imports: [\n        PassportModule.register({ defaultStrategy: 'jwt' }), // Default strategy\n        JwtModule.register({\n            secret: jwtConstants.secret,\n            signOptions: { expiresIn: '10m' },\n        }),\n        UsersModule,\n    ],\n    providers: [AuthService, LocalStrategy, JwtStrategy],\n    controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from './../users/users.service';\n\n@Injectable()\nexport class AuthService {\n    constructor(private usersService: UsersService, private jwtService: JwtService) {}\n\n    async validateUser(username: string, pass: string): Promise {\n        const user = await this.usersService.findOne(username);\n        if (user && user.password === pass) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { password, ...result } = user;\n            return result;\n        }\n        return null;\n    }\n\n    async login(user: any) {\n        const payload = { username: user.username, sub: user.id };\n        return {\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            access_token: this.jwtService.sign(payload),\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedRequest.html":{"url":"interfaces/AuthenticatedRequest.html","title":"interface - AuthenticatedRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthenticatedRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/serialization/serializer.interceptor.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Serializable } from './serializable';\nimport { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { from, Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { UserRole } from './../users/user-role';\nimport { User } from './../users/user.entity';\n\nexport interface AuthenticatedRequest extends Request {\n    readonly user: User;\n}\n\n@Injectable()\nexport class SerializerInterceptor implements NestInterceptor {\n    private async serializeResponse(response: Response, role: UserRole): Promise> {\n        const serializedProperties = await Promise.all(\n            Object.keys(response).map(async key => {\n                const value = response[key];\n\n                if (!(value instanceof Serializable)) {\n                    return {\n                        key,\n                        value,\n                    };\n                }\n\n                const serializedValue = await value.serialize(role);\n\n                return {\n                    key,\n                    value: serializedValue,\n                };\n            }),\n        );\n\n        return serializedProperties.reduce((result, { key, value }) => {\n            result[key] = value;\n\n            return result;\n        }, {});\n    }\n\n    public intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const request = context.switchToHttp().getRequest();\n\n        console.log('Paso');\n\n        return next.handle().pipe(\n            switchMap(response => {\n                if (typeof response !== 'object' || response === null) {\n                    return of(response);\n                }\n                console.log(response);\n\n                return from(this.serializeResponse(response, request.user?.role));\n            }),\n        );\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseSerializerService.html":{"url":"classes/BaseSerializerService.html","title":"class - BaseSerializerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseSerializerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/serialization/base-serializer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                markSerializableCollection\n                            \n                            \n                                    Public\n                                markSerializableValue\n                            \n                            \n                                    Public\n                                    Abstract\n                                    Async\n                                serialize\n                            \n                            \n                                    Private\n                                serializeCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            markSerializableCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    markSerializableCollection(values: E[])\n                \n            \n\n\n            \n                \n                    Defined in src/serialization/base-serializer.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            E[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Serializable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            markSerializableValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    markSerializableValue(value: E)\n                \n            \n\n\n            \n                \n                    Defined in src/serialization/base-serializer.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Serializable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            Async\n                            serialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    serialize(entity: E, role: UserRole)\n                \n            \n\n\n            \n                \n                    Defined in src/serialization/base-serializer.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                UserRole\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            serializeCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    serializeCollection(values: E[], role: UserRole)\n                \n            \n\n\n            \n                \n                    Defined in src/serialization/base-serializer.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            E[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                UserRole\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Serializable } from './serializable';\nimport { UserRole } from './../users/user-role';\n\nexport abstract class BaseSerializerService {\n    // E: Entity\n    // T: Serialized value\n\n    public abstract async serialize(entity: E, role: UserRole): Promise;\n\n    private serializeCollection(values: E[], role: UserRole): Promise {\n        return Promise.all(values.map(v => this.serialize(v, role)));\n    }\n\n    public markSerializableValue(value: E): Serializable {\n        return new Serializable(this.serialize.bind(this, value));\n    }\n\n    public markSerializableCollection(values: E[]): Serializable {\n        return new Serializable(this.serializeCollection.bind(this, values));\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configuration/configuration.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule } from '@nestjs/config';\nimport { Module } from '@nestjs/common';\nimport Joi = require('@hapi/joi');\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true, // No need to import ConfigModule in other modules once it's been loaded in the root module\n            envFilePath: '.development.env',\n            expandVariables: true,\n            validationSchema: Joi.object({\n                NODE_ENV: Joi.string()\n                    .valid('development', 'production', 'test', 'provision')\n                    .default('development'),\n                PORT: Joi.number().default(3000),\n                DB_HOST: Joi.string(),\n                // .uri(),\n                // .allow('localhost')\n                // .default('localhost'),\n                DB_PORT: Joi.number().default(3306),\n                DB_USERNAME: Joi.string(),\n                DB_PASSWORD: Joi.string(),\n                DB_NAME: Joi.string(),\n            }),\n            validationOptions: {\n                allowUnknown: true,\n                abortEarly: false,\n            },\n        }),\n    ],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsInt()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsInt } from 'class-validator';\n\nexport class CreateUserDto {\n    @IsInt()\n    firstName: string;\n\n    @IsString()\n    lastName: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            // imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => ({\n                type: 'mysql',\n                host: configService.get('DB_HOST'),\n                port: configService.get('DB_PORT'),\n                username: configService.get('DB_USERNAME'),\n                password: configService.get('DB_PASSWORD'),\n                database: configService.get('DB_NAME'),\n                autoLoadEntities: true,\n                synchronize: true,\n            }),\n        }),\n    ],\n    exports: [TypeOrmModule],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                healthcheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            healthcheck\n                        \n                        \n                    \n                \n            \n            \n                \nhealthcheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n    HealthCheckService,\n    DNSHealthIndicator,\n    TypeOrmHealthIndicator,\n    MemoryHealthIndicator,\n    DiskHealthIndicator,\n    HealthCheck,\n} from '@nestjs/terminus';\n\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private dns: DNSHealthIndicator,\n        private typeOrm: TypeOrmHealthIndicator,\n        private memory: MemoryHealthIndicator,\n        private disk: DiskHealthIndicator,\n    ) {}\n\n    @Get()\n    @HealthCheck()\n    healthcheck() {\n        return this.health.check([\n            () => this.dns.pingCheck('google', 'https://google.com'),\n            () => this.typeOrm.pingCheck('database'),\n            // The process should not use more than 500MB memory\n            () => this.memory.checkHeap('memory_heap', 500 * 1024 * 1024),\n            // The process should not have more than 150MB allocated\n            () => this.memory.checkRSS('memory_rss', 150 * 1024 * 1024),\n            // The used disk storage should not exceed 70% of the full disk size\n            () => this.disk.checkStorage('storage', { thresholdPercent: 0.5, path: '/' }),\n        ]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health.controller';\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwtConstants } from '../constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor() {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: jwtConstants.secret,\n        });\n    }\n\n    async validate(payload: any) {\n        return { id: payload.sub, username: payload.username };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private authService: AuthService) {\n        super();\n    }\n\n    async validate(username: string, password: string): Promise {\n        const user = await this.authService.validateUser(username, password);\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role.html":{"url":"classes/Role.html","title":"class - Role","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/role.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/role.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/role.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/role.entity.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from './user.entity';\nimport { Column, Entity, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\n\n@Entity()\nexport class Role {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @OneToMany(\n        type => Role,\n        role => role.users,\n    )\n    users: User[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Serializable.html":{"url":"classes/Serializable.html","title":"class - Serializable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Serializable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/serialization/serializable.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(serialize: (role: UserRole) => void)\n                    \n                \n                        \n                            \n                                Defined in src/serialization/serializable.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serialize\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            serialize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/serialization/serializable.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserRole } from './../users/user-role';\n\nexport class Serializable {\n    public constructor(public readonly serialize: (role: UserRole) => Promise) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SerializedUserDTO.html":{"url":"classes/SerializedUserDTO.html","title":"class - SerializedUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SerializedUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/serialized-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/serialized-user.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/serialized-user.dto.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SerializedUserDTO {\n    firstName: string;\n    lastName: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SerializerInterceptor.html":{"url":"injectables/SerializerInterceptor.html","title":"injectable - SerializerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SerializerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/serialization/serializer.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                intercept\n                            \n                            \n                                    Private\n                                    Async\n                                serializeResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/serialization/serializer.interceptor.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            serializeResponse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    serializeResponse(response: Response, role: UserRole)\n                \n            \n\n\n            \n                \n                    Defined in src/serialization/serializer.interceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                UserRole\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Serializable } from './serializable';\nimport { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { from, Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { UserRole } from './../users/user-role';\nimport { User } from './../users/user.entity';\n\nexport interface AuthenticatedRequest extends Request {\n    readonly user: User;\n}\n\n@Injectable()\nexport class SerializerInterceptor implements NestInterceptor {\n    private async serializeResponse(response: Response, role: UserRole): Promise> {\n        const serializedProperties = await Promise.all(\n            Object.keys(response).map(async key => {\n                const value = response[key];\n\n                if (!(value instanceof Serializable)) {\n                    return {\n                        key,\n                        value,\n                    };\n                }\n\n                const serializedValue = await value.serialize(role);\n\n                return {\n                    key,\n                    value: serializedValue,\n                };\n            }),\n        );\n\n        return serializedProperties.reduce((result, { key, value }) => {\n            result[key] = value;\n\n            return result;\n        }, {});\n    }\n\n    public intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const request = context.switchToHttp().getRequest();\n\n        console.log('Paso');\n\n        return next.handle().pipe(\n            switchMap(response => {\n                if (typeof response !== 'object' || response === null) {\n                    return of(response);\n                }\n                console.log(response);\n\n                return from(this.serializeResponse(response, request.user?.role));\n            }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fullName\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/users/user.entity.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserRole})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.entity.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fullName\n                    \n                \n\n                \n                    \n                        getfullName()\n                    \n                \n                            \n                                \n                                    Defined in src/users/user.entity.ts:28\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Exclude, Expose } from 'class-transformer';\nimport { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { UserRole } from './user-role';\n\n@Entity()\nexport class User {\n    constructor() {\n        (this.id = 4),\n            (this.username = 'manuucci96'),\n            (this.firstName = 'Manuel'),\n            (this.lastName = 'Nucci'),\n            (this.password = 'password');\n    }\n\n    @PrimaryGeneratedColumn('uuid')\n    id: number;\n\n    @Column('text')\n    username: string;\n\n    @Column('text')\n    firstName: string;\n\n    @Column('text')\n    lastName: string;\n\n    @Expose()\n    get fullName(): string {\n        return `${this.firstName} ${this.lastName}`;\n    }\n\n    // @Exclude()\n    @Column('text')\n    password: string;\n\n    // @ManyToOne(\n    //     type => User,\n    //     user => user.role,\n    // )\n    // role: Role;\n\n    @Column({ type: 'enum', enum: UserRole })\n    role: UserRole;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserSerializerService.html":{"url":"injectables/UserSerializerService.html","title":"injectable - UserSerializerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserSerializerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user-serializer.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseSerializerService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                serialize\n                            \n                            \n                                    Public\n                                markSerializableCollection\n                            \n                            \n                                    Public\n                                markSerializableValue\n                            \n                            \n                                    Public\n                                    Abstract\n                                    Async\n                                serialize\n                            \n                            \n                                    Private\n                                serializeCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/users/user-serializer.service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            serialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    serialize(entity: User, role: UserRole)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user-serializer.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                UserRole\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            markSerializableCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    markSerializableCollection(values: E[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseSerializerService\n\n                \n            \n            \n                \n                        Defined in         BaseSerializerService:18\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            E[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Serializable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            markSerializableValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    markSerializableValue(value: E)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseSerializerService\n\n                \n            \n            \n                \n                        Defined in         BaseSerializerService:14\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Serializable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            Async\n                            serialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    serialize(entity: E, role: UserRole)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseSerializerService\n\n                \n            \n            \n                \n                        Defined in         BaseSerializerService:8\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                UserRole\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            serializeCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    serializeCollection(values: E[], role: UserRole)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseSerializerService\n\n                \n            \n            \n                \n                        Defined in         BaseSerializerService:10\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            E[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                UserRole\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { User } from './user.entity';\nimport { UserRole } from './user-role';\nimport { SerializedUserDTO } from './dto/serialized-user.dto';\nimport { Injectable } from '@nestjs/common';\nimport { BaseSerializerService } from 'src/serialization/base-serializer.service';\nimport { omit } from 'lodash';\n\n@Injectable()\nexport class UserSerializerService extends BaseSerializerService {\n    constructor() // private readonly articleSerializatorService: ArticleSerializatorService\n    {\n        super();\n    }\n\n    public async serialize(entity: User, role: UserRole): Promise {\n        //* Here comes the logic of which properties to ommit based on role from user\n        console.log(entity);\n\n        const strippedEntity = omit(entity, ['password']);\n\n        // const articles = await this.articleSerializatorService.serializeCollectionForRole(\n        //   entity.charters,\n        //   role,\n        // );\n\n        return {\n            ...strippedEntity,\n            //   articles,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { CreateUserDto } from './dto/create-user.dto';\nimport { UsersService } from './users.service';\nimport { SerializerInterceptor } from './../serialization/serializer.interceptor';\nimport { UserSerializerService } from './user-serializer.service';\nimport { User } from './user.entity';\nimport { JwtAuthGuard } from './../auth/guards/jwt-auth.guard';\nimport { Controller, Get, Request, UseGuards, UseInterceptors, ParseIntPipe, Param, Post, Body } from '@nestjs/common';\n\n@Controller('users')\n@UseInterceptors(SerializerInterceptor)\n// @Controller('users')\nexport class UsersController {\n    public constructor(\n        private usersService: UsersService,\n        private readonly userSerializerService: UserSerializerService,\n    ) {}\n\n    @Get(':id')\n    async findOne(@Param('id', ParseIntPipe) id: number) {\n        return this.usersService.findOneById(id);\n    }\n\n    @Post()\n    create(@Body() createUserDto: CreateUserDto) {\n        return 'This action adds a new user';\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Get('profile')\n    getProfile(@Request() req) {\n        console.log('Llegó controller');\n\n        // return req.user;\n        // return new User();\n        const res = this.userSerializerService.markSerializableValue(new User());\n        console.log('Paso por acá');\n\n        return res;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUserSerializerService\n\nUserSerializerService\n\nUsersModule -->\n\nUserSerializerService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserSerializerService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserSerializerService } from './user-serializer.service';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n    imports: [TypeOrmModule.forFeature([User])],\n    controllers: [UsersController],\n    providers: [UsersService, UserSerializerService],\n    exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(UsersService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/users/users.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/users.service.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { CreateUserDto } from './dto/create-user.dto';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from './user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserRole } from './user-role';\n\n// export type User = any;\n\n@Injectable()\nexport class UsersService {\n    private readonly logger = new Logger(UsersService.name);\n    private readonly users: User[];\n\n    constructor(@InjectRepository(User) private usersRepository: Repository) {\n        this.users = [\n            {\n                id: 1,\n                username: 'john',\n                firstName: 'John',\n                lastName: 'Doe',\n                fullName: 'John Doe',\n                password: 'changeme',\n                role: UserRole.ADMIN,\n            },\n            {\n                id: 2,\n                username: 'chris',\n                firstName: 'John',\n                lastName: 'Doe',\n                fullName: 'John Doe',\n                password: 'secret',\n                role: UserRole.ADMIN,\n            },\n            {\n                id: 3,\n                username: 'maria',\n                firstName: 'John',\n                lastName: 'Doe',\n                fullName: 'John Doe',\n                password: 'guess',\n                role: UserRole.ADMIN,\n            },\n        ];\n    }\n\n    // constructor(@InjectRepository(User) private usersRepository: Repository) {}\n\n    async create(createUserDto: CreateUserDto): Promise {\n        const user = new User();\n        this.logger.log('Llego');\n        user.firstName = createUserDto.firstName;\n        user.lastName = createUserDto.lastName;\n\n        return this.usersRepository.save(user);\n    }\n\n    async findAll(): Promise {\n        this.logger.log('Find all users...');\n        return this.usersRepository.find();\n    }\n\n    async findOneById(id: number): Promise {\n        return this.usersRepository.findOne(id);\n    }\n\n    async findOne(username: string): Promise {\n        return this.users.find(user => user.username === username);\n    }\n\n    async remove(id: string): Promise {\n        await this.usersRepository.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/helpers/http-exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/serialization/base-serializer.service.ts\n            \n            class\n            BaseSerializerService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/serialization/serializable.ts\n            \n            class\n            Serializable\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/serialization/serializer.interceptor.ts\n            \n            injectable\n            SerializerInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/serialization/serializer.interceptor.ts\n            \n            interface\n            AuthenticatedRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/serialized-user.dto.ts\n            \n            class\n            SerializedUserDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/role.entity.ts\n            \n            class\n            Role\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/user-serializer.service.ts\n            \n            injectable\n            UserSerializerService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.0.0\n        \n            @nestjs/passport : ^7.0.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.5.7\n        \n            @nestjs/terminus : ^7.0.1\n        \n            @nestjs/typeorm : ^7.0.0\n        \n            cache-manager : ^3.3.0\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.12.2\n        \n            compression : ^1.7.4\n        \n            csurf : ^1.11.0\n        \n            express-rate-limit : ^5.1.3\n        \n            express-slow-down : ^1.3.1\n        \n            helmet : ^3.22.0\n        \n            lodash : ^4.17.15\n        \n            mysql : ^2.18.1\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.4\n        \n            typeorm : ^0.2.25\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../user-role.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/user-role.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 SCHOLARSHIP\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n                        \n                            \n                                 CAMPUS\n                            \n                        \n                        \n                            \n                                Value : 4\n                            \n                        \n                        \n                            \n                                 PROFESSORSHIP\n                            \n                        \n                        \n                            \n                                Value : 5\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUserSerializerService\n\nUserSerializerService\n\nUsersModule -->\n\nUserSerializerService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    secret: 'secretKey',\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
